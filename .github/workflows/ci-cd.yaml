name: CI/CD Pipeline

# on:
#   # push:
#   #   branches: [ "main" ]
#   workflow_dispatch:

# jobs:
#   build-and-push:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout repo
#         uses: actions/checkout@v3

#       - name: Log in to OCIR
#         run: |
#           echo "${{ secrets.OCI_AUTH_TOKEN }}" | docker login ${{ secrets.OCIR_REGISTRY }} -u "${{ secrets.OCI_USERNAME }}" --password-stdin

#       - name: Build & Push Docker image
#         run: |
#           IMAGE=${{ secrets.OCIR_REGISTRY }}/${{ secrets.OCIR_NAMESPACE }}/demo-app:${{ github.sha }}
#           docker build -t $IMAGE ./app
#           docker push $IMAGE
#           echo "IMAGE=$IMAGE" >> $GITHUB_ENV

#   deploy:
#     runs-on: ubuntu-latest
#     needs: build-and-push
#     steps:
#       - name: Checkout repo
#         uses: actions/checkout@v3

#       - name: Configure OCI CLI
#         run: |
#           mkdir -p ~/.oci
#           echo "${{ secrets.OCI_CLI_KEY }}" > ~/.oci/oci_api_key.pem
#           chmod 600 ~/.oci/oci_api_key.pem
#           oci setup repair-file-permissions --file ~/.oci/oci_api_key.pem || true
#           oci ce cluster create-kubeconfig --cluster-id ${{ secrets.OKE_CLUSTER_OCID }} --region ${{ secrets.OCI_REGION }} --file ~/.kube/config --token-version 2.0.0

#       - name: Deploy to OKE
#         run: |
#           IMAGE=${{ env.IMAGE }}
#           sed "s|REPLACE_IMAGE|$IMAGE|g" k8s/deployment.yaml | kubectl apply -f -
#           kubectl apply -f k8s/service.yaml


on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'k8s/**'
  workflow_dispatch:

env:
  OCI_REGISTRY: ${{ secrets.OCI_REGION }}.ocir.io
  IMAGE_TAG: ${{ github.sha }}
  OKE_KUBECONFIG_PATH: '/home/runner/.kube/config'

jobs:
  build_and_deploy:
    environment: dev
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      # =======================================================
      # OCI AUTHENTICATION & OCIR LOGIN
      # =======================================================
      
      - name: Install OCI CLI
        run: |
          python3 -m pip install --upgrade pip
          pip install oci-cli
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Check OCI CLI
        run: |
          oci --version

      - name: Write OCI API private key (PEM)
        run: |
          mkdir -p ~/.oci
          cat > ~/.oci/oci_api_key.pem <<'EOF'
          ${{ secrets.OCI_PRIVATE_KEY_PEM }}
          EOF
          chmod 600 ~/.oci/oci_api_key.pem

      - name: Write OCI config (DEFAULT profile)
        run: |
          cat > ~/.oci/config <<EOF
          [DEFAULT]
          user=${{ secrets.OCI_USER_OCID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_TENANCY_OCID }}
          region=${{ secrets.OCI_REGION }}
          key_file=$HOME/.oci/oci_api_key.pem
          EOF
          chmod 600 ~/.oci/config

      - name: Debug OCI CLI Auth
        run: |
          oci iam user get --user-id ${{ secrets.OCI_USER_OCID }} --debug 

      - name: Log in to Oracle Container Registry (OCIR) via OCI CLI
        run: |

          oci iam auth-token list --user-id ${{ secrets.OCI_USER_OCID }} --query "data[].id" --raw-output | while read -r TOKEN_ID; do
            if [ -n "$TOKEN_ID" ]; then
              echo "Deleting token with ID: $TOKEN_ID"
              oci iam auth-token delete --user-id ${{ secrets.OCI_USER_OCID }} --auth-token-id "$TOKEN_ID" --force
            fi
          done
          
          echo "--- Creating new OCI Auth Token ---"
          AUTH_TOKEN=$(oci iam auth-token create --user-id ${{ secrets.OCI_USER_OCID }} --description "github-action-token-$(date +%s)" --query 'data."token"' --raw-output)
          
          if [ -z "$AUTH_TOKEN" ]; then
            echo "Failed to generate OCI Auth Token."
            exit 1
          fi
          
          echo "--- Logging in to OCIR ---"
          echo $AUTH_TOKEN | docker login ${{ env.OCI_REGISTRY }} \
            --username '${{ secrets.OCIR_NAMESPACE }}/${{ secrets.OCI_USERNAME }}' \
            --password-stdin
      
      # =======================================================
      # BUILD & PUSH (CI)
      # =======================================================

      - name: Build and Push Docker Image to OCIR
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: |
            ${{ env.OCI_REGISTRY }}/${{ secrets.OCIR_APP_REPO }}:${{ env.IMAGE_TAG }}
            ${{ env.OCI_REGISTRY }}/${{ secrets.OCIR_APP_REPO }}:latest

      # =======================================================
      # DEPLOYMENT TO OKE (CD)
      # =======================================================

      - name: Get Kubeconfig for OKE Cluster
        run: |
          oci ce cluster create-kubeconfig \
            --cluster-id ${{ secrets.OKE_CLUSTER_OCID }} \
            --file ${{ env.OKE_KUBECONFIG_PATH }} \
            --region ${{ secrets.OCI_REGION }} \
            --token-version 2.0 \
            --overwrite
            
      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: ðŸ”„ Update Kubernetes Manifest (Image Tag)
        run: |
          FULL_IMAGE_URL="${{ env.OCI_REGISTRY }}/${{ secrets.OCIR_APP_REPO }}:${{ env.IMAGE_TAG }}"
          sed -i "s|__IMAGE_TAG_PLACEHOLDER__|${{ env.IMAGE_TAG }}|g" k8s/deployment.yaml

      - name: Apply Kubernetes Manifest to OKE
        run: |
          kubectl apply -f k8s/
          kubectl rollout status deployment/demo-python-app
