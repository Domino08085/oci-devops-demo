name: CI/CD Pipeline

on:
  push:
    branches:
      - main
    paths:
      - 'app/**'
      - 'k8s/**'
  workflow_dispatch:

env:
  OCI_REGISTRY: fra.ocir.io
  IMAGE_TAG: ${{ github.sha }}
  OKE_KUBECONFIG_PATH: '/home/runner/.kube/config'

jobs:
  build_and_deploy:
    environment: dev
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      # =======================================================
      # OCI AUTHENTICATION & OCIR LOGIN
      # =======================================================
      
      - name: Install OCI CLI
        run: |
          python3 -m pip install --upgrade pip
          pip install oci-cli
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Check OCI CLI
        run: |
          oci --version

      - name: Write OCI API private key (PEM)
        run: |
          mkdir -p ~/.oci
          cat > ~/.oci/oci_api_key.pem <<'EOF'
          ${{ secrets.OCI_PRIVATE_KEY_PEM }}
          EOF
          chmod 600 ~/.oci/oci_api_key.pem

      - name: Write OCI config (DEFAULT profile)
        run: |
          cat > ~/.oci/config <<EOF
          [DEFAULT]
          user=${{ secrets.OCI_USER_OCID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_TENANCY_OCID }}
          region=${{ secrets.OCI_REGION }}
          key_file=$HOME/.oci/oci_api_key.pem
          EOF
          chmod 600 ~/.oci/config

      - name: Docker login to OCIR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.OCI_REGISTRY }}
          username: ${{ secrets.OCIR_LOGIN }}
          password: ${{ secrets.OCI_AUTH_TOKEN }}
      
      # =======================================================
      # BUILD & PUSH (CI)
      # =======================================================

      - name: Compute image ref
        id: img
        run: |
          IMAGE_NAME=${IMAGE_NAME:-demo-python-app}

          IMAGE="${{ env.OCI_REGISTRY }}/${{ secrets.OCIR_NAMESPACE }}/${IMAGE_NAME}:${{ env.IMAGE_TAG }}"
          LATEST="${{ env.OCI_REGISTRY }}/${{ secrets.OCIR_NAMESPACE }}/${IMAGE_NAME}:latest"

          echo "IMAGE=$IMAGE"
          echo "LATEST=$LATEST"
          echo "IMAGE=$IMAGE"  >> $GITHUB_OUTPUT
          echo "LATEST=$LATEST" >> $GITHUB_OUTPUT
      
      - name: Build and Push Docker Image to OCIR
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: |
            ${{ steps.img.outputs.IMAGE }}
            ${{ steps.img.outputs.LATEST }}

      # =======================================================
      # DEPLOYMENT TO OKE (CD)
      # =======================================================

      - name: Get Kubeconfig for OKE Cluster
        run: |
          oci ce cluster create-kubeconfig \
            --cluster-id ${{ secrets.OKE_CLUSTER_OCID }} \
            --file ${{ env.OKE_KUBECONFIG_PATH }} \
            --region ${{ secrets.OCI_REGION }} \
            --token-version 2.0.0 \
            --overwrite
            
      - name: Setup Kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Update Kubernetes Manifest (Image Tag)
        run: |
          FULL_IMAGE_URL="${{ env.OCI_REGISTRY }}/${{ secrets.OCIR_APP_REPO }}:${{ env.IMAGE_TAG }}"
          sed -i "s|__IMAGE_TAG_PLACEHOLDER__|${{ env.IMAGE_TAG }}|g" k8s/deployment.yaml

      - name: Ensure namespace exists
        env:
          K8S_NAMESPACE: demo
        run: |
          kubectl create namespace "$K8S_NAMESPACE" --dry-run=client -o yaml | kubectl apply -f -

      - name: Create/Update imagePullSecret in that namespace
        env:
          K8S_NAMESPACE: demo
          OCI_REGISTRY: ${{ env.OCI_REGISTRY }}
        run: |
          kubectl create secret docker-registry ocir-pull \
            --docker-server=${OCI_REGISTRY} \
            --docker-username="${{ secrets.OCIR_NAMESPACE }}/${{ secrets.OCI_USERNAME }}" \
            --docker-password="${{ secrets.OCI_AUTH_TOKEN }}" \
            --docker-email="${{ github.actor }}@users.noreply.github.com" \
            -n "$K8S_NAMESPACE" \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Apply manifests
        env:
          IMAGE: ${{ steps.img.outputs.IMAGE }}
          K8S_NAMESPACE: demo
        run: |
          envsubst < k8s/deployment.yaml | kubectl apply -f -
          envsubst < k8s/service.yaml    | kubectl apply -f -
