name: Destroy TF

on:
  workflow_dispatch:

jobs:
  plan-terraform:
    environment: dev
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Write OCI API private key (PEM)
        run: |
          mkdir -p ~/.oci
          cat > ~/.oci/oci_api_key.pem <<'EOF'
          ${{ secrets.OCI_PRIVATE_KEY_PEM }}
          EOF
          chmod 600 ~/.oci/oci_api_key.pem

      - name: Write OCI config (DEFAULT profile)
        run: |
          cat > ~/.oci/config <<EOF
          [DEFAULT]
          user=${{ secrets.OCI_USER_OCID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_TENANCY_OCID }}
          region=${{ secrets.OCI_REGION }}
          key_file=$HOME/.oci/oci_api_key.pem
          EOF
          chmod 600 ~/.oci/config

      - name: Terraform init + plan
        env:
          TF_IN_AUTOMATION: "1"
          TF_LOG: "INFO"            
          TF_LOG_PATH: "tf.log"
          TF_VAR_region:           ${{ secrets.OCI_REGION }}
          TF_VAR_tenancy_ocid:     ${{ secrets.OCI_TENANCY_OCID }}
          TF_VAR_compartment_ocid: ${{ secrets.OCI_COMPARTMENT_OCID }}
          TF_VAR_user_ocid:        ${{ secrets.OCI_USER_OCID }}
          TF_VAR_fingerprint:      ${{ secrets.OCI_FINGERPRINT }}
          TF_VAR_private_key_pem:  ${{ secrets.OCI_PRIVATE_KEY_PEM }}
          TF_VAR_namespace:         ${{ secrets.OCIR_NAMESPACE }}
        run: |
          set -euxo pipefail
          terraform -version
          terraform init -reconfigure -input=false
          terraform validate
          terraform plan -input=false -out=tfplan
          echo "----- TF LOG TAIL -----"
          tail -n 200 tf.log || true

      - name: Upload tfplan
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/tfplan

  destroy-terraform:
    runs-on: ubuntu-latest
    needs: plan-terraform
    environment: dev
    defaults:
      run:
        working-directory: terraform
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Install OCI CLI
        run: |
          python3 -m pip install --upgrade pip
          pip install oci-cli
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Check OCI CLI
        run: |
          oci --version

      - name: Write OCI API private key (PEM)
        run: |
          mkdir -p ~/.oci
          cat > ~/.oci/oci_api_key.pem <<'EOF'
          ${{ secrets.OCI_PRIVATE_KEY_PEM }}
          EOF
          chmod 600 ~/.oci/oci_api_key.pem

      - name: Write OCI config (DEFAULT profile)
        run: |
          cat > ~/.oci/config <<EOF
          [DEFAULT]
          user=${{ secrets.OCI_USER_OCID }}
          fingerprint=${{ secrets.OCI_FINGERPRINT }}
          tenancy=${{ secrets.OCI_TENANCY_OCID }}
          region=${{ secrets.OCI_REGION }}
          key_file=$HOME/.oci/oci_api_key.pem
          EOF
          chmod 600 ~/.oci/config

      - name: Download tfplan
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: terraform

      - name: Terraform destroy
        env:
          TF_IN_AUTOMATION: "1"
          TF_LOG: "INFO"            
          TF_LOG_PATH: "tf.log"
          OKE_CLUSTER_ID:          ${{ vars.OKE_CLUSTER_ID }}
          DEPLOYMENT_NAME:         ${{ secrets.DEPLOYMENT_NAME }}
          REGION:                  ${{ secrets.OCI_REGION }}
          K8S_NAMESPACE:           ${{ secrets.K8S_NAMESPACE }}
          TF_VAR_region:           ${{ secrets.OCI_REGION }}
          TF_VAR_tenancy_ocid:     ${{ secrets.OCI_TENANCY_OCID }}
          TF_VAR_compartment_ocid: ${{ secrets.OCI_COMPARTMENT_OCID }}
          TF_VAR_user_ocid:        ${{ secrets.OCI_USER_OCID }}
          TF_VAR_fingerprint:      ${{ secrets.OCI_FINGERPRINT }}
          TF_VAR_private_key_pem:  ${{ secrets.OCI_PRIVATE_KEY_PEM }}
          TF_VAR_namespace:        ${{ secrets.OCIR_NAMESPACE }}
        run: |
          set -euo pipefail
          terraform init -input=false -reconfigure
          
          echo "cleaning up K8s resources before destroying the cluster..."
          mkdir -p ~/.kube
          if [ -z "${OKE_CLUSTER_ID:-}" ]; then
            echo "ERROR: OKE_CLUSTER_ID not set"; exit 1
          fi

          oci ce cluster create-kubeconfig \
            --cluster-id "${OKE_CLUSTER_ID}" \
            --file "$HOME/.kube/config" \
            --region "${REGION}" \
            --token-version 2.0.0 \
            --kube-endpoint PUBLIC_ENDPOINT

          chmod 600 "$HOME/.kube/config"
          kubectl version --client
          kubectl get nodes

          if [ -z "${K8S_NAMESPACE:-}" ]; then
            echo "ERROR: K8S_NAMESPACE not set"; exit 1
          fi
          echo "Namespace: ${K8S_NAMESPACE}"

          SVC_LB=$(kubectl get svc -n "${K8S_NAMESPACE}" -o json | jq -r '.items[] | select(.spec.type=="LoadBalancer") | .metadata.name' || true)
          if [ -n "${SVC_LB}" ]; then
            echo "${SVC_LB}" | xargs -r -n1 -I{} kubectl delete svc {} -n "${K8S_NAMESPACE}" --ignore-not-found=true
          else
            echo "No LoadBalancer Services in ${K8S_NAMESPACE}"
          fi

          TIMEOUT=600
          START=$(date +%s)
          while true; do
            CNT=$(kubectl get svc -n "${K8S_NAMESPACE}" -o json | jq '[.items[] | select(.spec.type=="LoadBalancer")] | length')
            echo "Remaining LB services: $CNT"
            [ "$CNT" -eq 0 ] && break
            [ $(( $(date +%s)-START )) -ge $TIMEOUT ] && { echo "Timeout waiting for LB deletion"; exit 1; }
            sleep 10
          done

          echo "Deleting deployment ${DEPLOYMENT_NAME}..."
          kubectl delete deployment ${DEPLOYMENT_NAME} -n "${K8S_NAMESPACE}" --ignore-not-found=true

          echo "Deleting namespace ${K8S_NAMESPACE}..."
          kubectl delete namespace "${K8S_NAMESPACE}" --ignore-not-found=true || true
          
          echo "Waiting for namespace ${K8S_NAMESPACE} to be deleted..."
          for i in $(seq 1 60); do
            kubectl get ns "${K8S_NAMESPACE}" >/dev/null 2>&1 || { echo "Namespace ${K8S_NAMESPACE} gone."; break; }
            sleep 5
          done

          terraform destroy -auto-approve
